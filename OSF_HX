% Comprehensive Heat Exchanger Optimization for Electrified Aircraft
clear; clc;

%% Input Parameters for Electrified Aircraft Application
% System Specifications (Based on NASA Data)
P_motor = 200e3;       % Motor power (W)
P_electronics = 50e3;  % Power electronics power (W)
P_battery = 50e3;      % Battery power (W)

% Efficiency Assumptions
eta_motor = 0.95;         % Motor efficiency
eta_electronics = 0.98;   % Electronics efficiency
eta_battery = 0.92;       % Battery efficiency

% Heat Load Calculations
Q_motor = P_motor * (1 - eta_motor);            % Heat load from motor (W)
Q_electronics = P_electronics * (1 - eta_electronics); % Heat load from electronics (W)
Q_battery = P_battery * (1 - eta_battery);      % Heat load from battery (W)
Q_total = Q_motor + Q_electronics + Q_battery;  % Total heat load (W)

% Adjust to 19 kW for total heat load
Q_total = 19000; % Overriding to 19kW based on user input
disp(['Total Heat Load (Q): ', num2str(Q_total), ' W']);

% Revised Bounds for Design Variables
lb = [0.02, 0.005, 0.01, 0.1, 0.1, 0.01, 2, 0.5, 0.05, 0.01, 0.01, 5]; % Lower bounds
ub = [0.3, 0.05, 0.5, 0.5, 0.5, 0.5, 50, 5, 0.3, 0.05, 0.05, 50];    % Upper bounds

% Objective Function
objFun = @(x) objectiveFunctions(x, Q_total);

% Constraint Function
constraintFun = @(x) heatExchangerConstraints(x);

% Genetic Algorithm Options for GAMULTIOBJ
options = optimoptions('gamultiobj', ...
    'PopulationSize', 200, ... % Increase population size
    'MaxGenerations', 300, ... % Allow more generations
    'CrossoverFraction', 0.8, ...
    'FunctionTolerance', 1e-6, ...
    'UseParallel', true);

% Multi-objective Genetic Algorithm
[optimalVariables, optimalObjectives] = gamultiobj(objFun, length(lb), [], [], [], [], lb, ub, constraintFun, options);

% Display Results
disp('Optimal Variables (Coolant Side: Width, Height, Length, Fin Spacing | Air Side: Width, Height, Length, Fin Spacing | Number of Layers, Air Flow Rate, Cooling Flow Rate):');
disp(optimalVariables);
disp('Optimal Objectives (Minimized Weight, Maximized Heat Transfer, Minimized Pressure Drop):');
disp(optimalObjectives);

%% Plot Pareto Front
% Extract objectives
weight = optimalObjectives(:, 1);            % Minimized weight
heatTransfer = -optimalObjectives(:, 2);     % Maximized heat transfer (negative sign reversed)
pressureDrop = optimalObjectives(:, 3);      % Minimized pressure drop

% 3D Pareto Front
figure;
scatter3(weight, heatTransfer, pressureDrop, 50, 'filled');
xlabel('Weight (kg)');
ylabel('Heat Transfer (W)');
zlabel('Pressure Drop (Pa)');
title('3D Pareto Front');
grid on;

% 2D Pareto Front Projections
figure;
subplot(1, 3, 1);
scatter(weight, heatTransfer, 50, 'filled');
xlabel('Weight (kg)');
ylabel('Heat Transfer (W)');
title('Weight vs. Heat Transfer');
grid on;

subplot(1, 3, 2);
scatter(weight, pressureDrop, 50, 'filled');
xlabel('Weight (kg)');
ylabel('Pressure Drop (Pa)');
title('Weight vs. Pressure Drop');
grid on;

subplot(1, 3, 3);
scatter(heatTransfer, pressureDrop, 50, 'filled');
xlabel('Heat Transfer (W)');
ylabel('Pressure Drop (Pa)');
title('Heat Transfer vs. Pressure Drop');
grid on;

%% Objective Function Implementation
function F = objectiveFunctions(x, Q_total)
    % Coolant Side
    W_cool = x(1); H_cool = x(2); L_cool = x(3); fin_spacing_cool = x(4);
    % Air Side
    W_air = x(5); H_air = x(6); L_air = x(7); fin_spacing_air = x(8);
    % Common Parameters
    N_layers = x(9); air_flow = x(10); cooling_flow = x(11); t_fin = 0.0005;

    % Constants
    material_density = 2700;
    rho_cool = 1050; mu_cool = 0.001; cp_cool = 4186; k_cool = 0.6;
    rho_air = 1.2; mu_air = 18.1e-6; cp_air = 1005; k_air = 0.0262;

    % Prandtl Numbers
    Pr_cool = (mu_cool * cp_cool) / k_cool; Pr_air = (mu_air * cp_air) / k_air;

    % Hydraulic Diameter Calculations
    Dh_cool = 4 * fin_spacing_cool * H_cool / (2 * (fin_spacing_cool + H_cool));
    Dh_air = 4 * fin_spacing_air * H_air / (2 * (fin_spacing_air + H_air));

    % Reynolds Numbers
    Re_cool = rho_cool * cooling_flow * Dh_cool / mu_cool;
    Re_air = rho_air * air_flow * Dh_air / mu_air;

    % Heat Transfer Coefficients
    h_cool = 0.023 * k_cool / Dh_cool * Re_cool^0.8 * Pr_cool^(1/3);
    h_air = 0.023 * k_air / Dh_air * Re_air^0.8 * Pr_air^(1/3);

    % Number of Channels and Heat Transfer Area
    N_channels_cool = max(1, floor(W_cool / fin_spacing_cool));
    N_channels_air = max(1, floor(W_air / fin_spacing_air));
    A_cool = H_cool * L_cool * N_layers * N_channels_cool;
    A_air = H_air * L_air * N_layers * N_channels_air;

    % UA Calculation
    UA = 1 / (1 / (h_cool * A_cool) + 1 / (h_air * A_air));

    % Heat Transfer
    Q = UA * Q_total;

    % Pressure Drop
    deltaP_cool = (0.5 * rho_cool * cooling_flow^2 / Dh_cool);
    deltaP_air = (0.5 * rho_air * air_flow^2 / Dh_air);
    deltaP_total = deltaP_cool + deltaP_air;

    % Material Weight
    fin_volume = A_cool * t_fin + A_air * t_fin;
    fin_weight = fin_volume * material_density;

    % Objectives
    F(1) = fin_weight;     % Minimize Weight
    F(2) = -Q;             % Maximize Heat Transfer
    F(3) = deltaP_total;   % Minimize Pressure Drop
end

%% Constraint Function
function [c, ceq] = heatExchangerConstraints(x)
    ceq = []; % No equality constraints
    c = [
        x(9) - 50;   % Number of layers < 50
        x(10) - 5;   % Air flow rate < 5 kg/s
        x(11) - 2;   % Cooling flow rate < 2 kg/s
    ];
end
