%% Comprehensive Heat Exchanger Optimization for Electrified Aircraft
clear; clc;

%% Input Parameters for Electrified Aircraft Application
% Heat Load Assumption
Q_total = 19e3; % Total heat load (W)
disp(['Total Heat Load (Q): ', num2str(Q_total), ' W']);

%% Bounds for Design Variables
% Hot and Cold Side Variables: [Fin Length, Fin Width, Fin Height, Fin Spacing, Flow Length, N Channels, N Layers, Air Velocity, Coolant Velocity]
lb = [0.1, 0.01, 0.01, 0.002, 0.2, 10, 1, 1.0, 0.5, ... % Hot side
      0.1, 0.01, 0.01, 0.002, 0.2, 10, 1, 1.0, 0.5];    % Cold side
ub = [0.3, 0.05, 0.05, 0.01, 0.5, 100, 10, 3.0, 1.5, ... % Hot side
      0.3, 0.05, 0.05, 0.01, 0.5, 100, 10, 3.0, 1.5];    % Cold side

% Objective Function
objFun = @(x) heatExchangerObjective(x, Q_total);

% Constraint Function to Ensure Realistic Values
constraintFun = @(x) heatExchangerConstraints(x);

% Genetic Algorithm Options for GAMULTIOBJ
options = optimoptions('gamultiobj', ...
    'PopulationSize', 150, ...
    'MaxGenerations', 100, ...
    'CrossoverFraction', 0.8, ...
    'FunctionTolerance', 1e-6, ...
    'UseParallel', true, ...
    'PlotFcn', {@gaplotpareto});

% Multi-objective Genetic Algorithm
[optimalVariables, optimalObjectives] = gamultiobj(objFun, length(lb), [], [], [], [], lb, ub, constraintFun, options);

% Display Results
disp('Optimal Variables (Hot-side and Cold-side Design Variables):');
disp(optimalVariables);

disp('Optimal Objectives:');
disp(['Weight (kg): ', num2str(optimalObjectives(:,1)' * 10)]); % Convert normalized weight

disp(['Heat Transfer Rate (W): ', num2str(-optimalObjectives(:,2)')]);
disp(['Pressure Drop (Pa): ', num2str(optimalObjectives(:,3)' * 100)]); % Convert normalized pressure drop

%% Objective Function Implementation
function F = heatExchangerObjective(x, Q_total)
    % Extract design variables for Hot and Cold Sides
    hot_vars = x(1:9); % Hot side: [fin length, width, height, spacing, flow length, N_channels, N_layers, air velocity, coolant velocity]
    cold_vars = x(10:18); % Cold side: [fin length, width, height, spacing, flow length, N_channels, N_layers, air velocity, coolant velocity]

    % Assign hot side variables
    fin_length_hot = hot_vars(1);      % [m]
    fin_width_hot = hot_vars(2);       % [m]
    fin_height_hot = hot_vars(3);      % [m]
    fin_spacing_hot = hot_vars(4);     % [m]
    L1 = hot_vars(5);                  % [m]
    N_channels_hot = hot_vars(6);      % [-]
    N_layers_hot = hot_vars(7);        % [-]
    v_air_hot = hot_vars(8);           % [m/s]
    v_coolant_hot = hot_vars(9);       % [m/s]

    % Assign cold side variables
    fin_length_cold = cold_vars(1);    % [m]
    fin_width_cold = cold_vars(2);     % [m]
    fin_height_cold = cold_vars(3);    % [m]
    fin_spacing_cold = cold_vars(4);   % [m]
    L2 = cold_vars(5);                 % [m]
    N_channels_cold = cold_vars(6);    % [-]
    N_layers_cold = cold_vars(7);      % [-]
    v_air_cold = cold_vars(8);         % [m/s]
    v_coolant_cold = cold_vars(9);     % [m/s]

    % Fluid Properties for Hot Side (Coolant)
    rho_hot = 1050;         % Density [kg/m³]
    mu_hot = 0.001;         % Viscosity [Pa·s]
    cp_hot = 4186;          % Specific heat capacity [J/kg·K]
    k_hot = 0.6;            % Thermal conductivity [W/m·K]

    % Fluid Properties for Cold Side (Air)
    rho_cold = 1.2;         % Density [kg/m³]
    mu_cold = 18.1e-6;      % Viscosity [Pa·s]
    cp_cold = 1005;         % Specific heat capacity [J/kg·K]
    k_cold = 0.0262;        % Thermal conductivity [W/m·K]

    % Constants
    material_density = 2700; % Density of aluminum [kg/m³]
    t_fin = 0.005;           % Fin thickness [m]
    C_min = min(rho_hot * cp_hot * v_coolant_hot, rho_cold * cp_cold * v_air_cold);
    C_max = max(rho_hot * cp_hot * v_coolant_hot, rho_cold * cp_cold * v_air_cold);
    C_r = C_min / C_max;    % Heat capacity ratio

    % Manglik-Bergles Correlations
    % Hydraulic Diameter
    D_h_hot = 4 * fin_spacing_hot * fin_height_hot / (2 * (fin_spacing_hot + fin_height_hot));
    D_h_cold = 4 * fin_spacing_cold * fin_height_cold / (2 * (fin_spacing_cold + fin_height_cold));

    % Reynolds Number
    Re_hot = rho_hot * v_coolant_hot * D_h_hot / mu_hot;
    Re_cold = rho_cold * v_air_cold * D_h_cold / mu_cold;

    % Colburn j-factor
    j_hot = 0.6522 * Re_hot^(-0.5403) * (fin_spacing_hot / L1)^0.1541 * (fin_height_hot / L1)^(-0.1499) * (t_fin / L1)^0.0678;
    j_cold = 0.6522 * Re_cold^(-0.5403) * (fin_spacing_cold / L2)^0.1541 * (fin_height_cold / L2)^(-0.1499) * (t_fin / L2)^0.0678;

    % Heat Transfer Coefficients
    h_hot = j_hot * Re_hot * k_hot / D_h_hot;
    h_cold = j_cold * Re_cold * k_cold / D_h_cold;

    % Overall Heat Transfer Coefficient
    UA = 1 / (1 / (h_hot * fin_length_hot * L1 * N_layers_hot * N_channels_hot) + 1 / (h_cold * fin_length_cold * L2 * N_layers_cold * N_channels_cold));

    % NTU and Effectiveness for Counterflow Configuration
    NTU = UA / C_min;
    effectiveness = (1 - exp(-NTU * (1 - C_r))) / (1 - C_r * exp(-NTU * (1 - C_r)));

    % Heat Transfer Rate
    Q = effectiveness * C_min * (50 - 20); % Assuming inlet temperature difference of 50K to 20K

    % Total Pressure Drop
    f_hot = 9.624 * Re_hot^(-0.7422) * (fin_spacing_hot / L1)^(-0.1856) * (fin_height_hot / L1)^(-0.3053) * (t_fin / L1)^0.2659;
    f_cold = 9.624 * Re_cold^(-0.7422) * (fin_spacing_cold / L2)^(-0.1856) * (fin_height_cold / L2)^(-0.3053) * (t_fin / L2)^0.2659;
    pressure_drop_hot = f_hot * (L1 / D_h_hot) * (0.5 * rho_hot * v_coolant_hot^2);
    pressure_drop_cold = f_cold * (L2 / D_h_cold) * (0.5 * rho_cold * v_air_cold^2);
    pressure_drop_total = pressure_drop_hot + pressure_drop_cold;

    % Weight Calculations
    fin_volume_hot = fin_length_hot * fin_width_hot * t_fin * N_channels_hot * N_layers_hot;
    fin_weight_hot = fin_volume_hot * material_density;

    fin_volume_cold = fin_length_cold * fin_width_cold * t_fin * N_channels_cold * N_layers_cold;
    fin_weight_cold = fin_volume_cold * material_density;

    total_weight = fin_weight_hot + fin_weight_cold; % Total weight

    % Objective Function Values
    F(1) = total_weight / 10;       % Normalize weight
    F(2) = -Q;                      % Maximize heat transfer rate (negative for minimization)
    F(3) = pressure_drop_total / 100; % Normalize pressure drop
end

%% Constraint Function
function [c, ceq] = heatExchangerConstraints(x)
    [total_weight, pressure_drop_total, Q] = evaluateConstraints(x);
    ceq = []; % No equality constraints
    c = [total_weight - 20; % Ensure weight < 20 kg
         pressure_drop_total - 250; % Ensure pressure drop < 250 Pa
         Q - 19e3]; % Ensure heat transfer <= total heat load
end

function [total_weight, pressure_drop_total, Q] = evaluateConstraints(x)
    % Extract design variables for Hot and Cold Sides
    hot_vars = x(1:9); % Hot side variables
    cold_vars = x(10:18); % Cold side variables

    % Assign hot side variables
    fin_length_hot = hot_vars(1); fin_height_hot = hot_vars(3); fin_spacing_hot = hot_vars(4);
    L1 = hot_vars(5); N_channels_hot = hot_vars(6); N_layers_hot = hot_vars(7); 
    v_coolant_hot = hot_vars(9);

    % Assign cold side variables
    fin_length_cold = cold_vars(1); fin_height_cold = cold_vars(3); fin_spacing_cold = cold_vars(4);
    L2 = cold_vars(5); N_channels_cold = cold_vars(6); N_layers_cold = cold_vars(7); 
    v_air_cold = cold_vars(8);

    % Fluid Properties
    rho_hot = 1050; mu_hot = 0.001; cp_hot = 4186; k_hot = 0.6;
    rho_cold = 1.2; mu_cold = 18.1e-6; cp_cold = 1005; k_cold = 0.0262;

    % Material and Fin Properties
    material_density = 2700; t_fin = 0.005;

    % Hydraulic Diameters
    D_h_hot = 4 * fin_spacing_hot * fin_height_hot / (2 * (fin_spacing_hot + fin_height_hot));
    D_h_cold = 4 * fin_spacing_cold * fin_height_cold / (2 * (fin_spacing_cold + fin_height_cold));

    % Reynolds Numbers
    Re_hot = rho_hot * v_coolant_hot * D_h_hot / mu_hot;
    Re_cold = rho_cold * v_air_cold * D_h_cold / mu_cold;

    % Colburn j-factors
    j_hot = 0.6522 * Re_hot^(-0.5403) * (fin_spacing_hot / L1)^0.1541 * (fin_height_hot / L1)^(-0.1499) * (t_fin / L1)^0.0678;
    j_cold = 0.6522 * Re_cold^(-0.5403) * (fin_spacing_cold / L2)^0.1541 * (fin_height_cold / L2)^(-0.1499) * (t_fin / L2)^0.0678;

    % Heat Transfer Coefficients
    h_hot = j_hot * Re_hot * k_hot / D_h_hot;
    h_cold = j_cold * Re_cold * k_cold / D_h_cold;

    % Overall Heat Transfer Coefficient
    UA = 1 / (1 / (h_hot * fin_length_hot * L1 * N_layers_hot * N_channels_hot) + 1 / (h_cold * fin_length_cold * L2 * N_layers_cold * N_channels_cold));

    % Heat Transfer Rate
    C_min = min(rho_hot * cp_hot * v_coolant_hot, rho_cold * cp_cold * v_air_cold);
    C_r = C_min / max(rho_hot * cp_hot * v_coolant_hot, rho_cold * cp_cold * v_air_cold);
    NTU = UA / C_min;
    effectiveness = (1 - exp(-NTU * (1 - C_r))) / (1 - C_r * exp(-NTU * (1 - C_r)));
    Q = effectiveness * C_min * (50 - 20); % Assuming inlet temperature difference of 50K to 20K

    % Pressure Drops
    f_hot = 9.624 * Re_hot^(-0.7422) * (fin_spacing_hot / L1)^(-0.1856) * (fin_height_hot / L1)^(-0.3053) * (t_fin / L1)^0.2659;
    f_cold = 9.624 * Re_cold^(-0.7422) * (fin_spacing_cold / L2)^(-0.1856) * (fin_height_cold / L2)^(-0.3053) * (t_fin / L2)^0.2659;
    pressure_drop_hot = f_hot * (L1 / D_h_hot) * (0.5 * rho_hot * v_coolant_hot^2);
    pressure_drop_cold = f_cold * (L2 / D_h_cold) * (0.5 * rho_cold * v_air_cold^2);
    pressure_drop_total = pressure_drop_hot + pressure_drop_cold;

    % Weight Calculations
    fin_volume_hot = fin_length_hot * hot_vars(2) * t_fin * N_channels_hot * N_layers_hot;
    fin_volume_cold = fin_length_cold * cold_vars(2) * t_fin * N_channels_cold * N_layers_cold;
    total_weight = (fin_volume_hot + fin_volume_cold) * material_density; % Total weight
end


